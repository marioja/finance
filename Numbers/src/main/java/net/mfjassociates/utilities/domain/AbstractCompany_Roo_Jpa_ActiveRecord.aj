// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.mfjassociates.utilities.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import net.mfjassociates.utilities.domain.AbstractCompany;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AbstractCompany_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager AbstractCompany.entityManager;
    
    public static final List<String> AbstractCompany.fieldNames4OrderClauseFilter = java.util.Arrays.asList("businessAddress", "companyName", "mainTelephoneNumber");
    
    public static final EntityManager AbstractCompany.entityManager() {
        EntityManager em = new AbstractCompany() {
        }.entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AbstractCompany.countAbstractCompanys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AbstractCompany o", Long.class).getSingleResult();
    }
    
    public static List<AbstractCompany> AbstractCompany.findAllAbstractCompanys() {
        return entityManager().createQuery("SELECT o FROM AbstractCompany o", AbstractCompany.class).getResultList();
    }
    
    public static List<AbstractCompany> AbstractCompany.findAllAbstractCompanys(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AbstractCompany o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AbstractCompany.class).getResultList();
    }
    
    public static AbstractCompany AbstractCompany.findAbstractCompany(Long id) {
        if (id == null) return null;
        return entityManager().find(AbstractCompany.class, id);
    }
    
    public static List<AbstractCompany> AbstractCompany.findAbstractCompanyEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AbstractCompany o", AbstractCompany.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<AbstractCompany> AbstractCompany.findAbstractCompanyEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AbstractCompany o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AbstractCompany.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void AbstractCompany.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AbstractCompany.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AbstractCompany attached = AbstractCompany.findAbstractCompany(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AbstractCompany.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AbstractCompany.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AbstractCompany AbstractCompany.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AbstractCompany merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
