// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.mfjassociates.utilities.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.mfjassociates.utilities.domain.Document;
import net.mfjassociates.utilities.domain.DocumentDataOnDemand;
import net.mfjassociates.utilities.domain.Prefix;
import net.mfjassociates.utilities.domain.PrefixDataOnDemand;
import net.mfjassociates.utilities.shared.domain.DocumentType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DocumentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DocumentDataOnDemand: @Component;
    
    private Random DocumentDataOnDemand.rnd = new SecureRandom();
    
    private List<Document> DocumentDataOnDemand.data;
    
    @Autowired
    PrefixDataOnDemand DocumentDataOnDemand.prefixDataOnDemand;
    
    public Document DocumentDataOnDemand.getNewTransientDocument(int index) {
        Document obj = new Document();
        setCreated(obj, index);
        setDescription(obj, index);
        setDocType(obj, index);
        setInUse(obj, index);
        setNumerical(obj, index);
        setPrefix(obj, index);
        setUpdated(obj, index);
        return obj;
    }
    
    public void DocumentDataOnDemand.setCreated(Document obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void DocumentDataOnDemand.setDescription(Document obj, int index) {
        String description = "description_" + index;
        if (description.length() > 80) {
            description = description.substring(0, 80);
        }
        obj.setDescription(description);
    }
    
    public void DocumentDataOnDemand.setDocType(Document obj, int index) {
        DocumentType docType = DocumentType.class.getEnumConstants()[0];
        obj.setDocType(docType);
    }
    
    public void DocumentDataOnDemand.setInUse(Document obj, int index) {
        Boolean inUse = false;
        obj.setInUse(inUse);
    }
    
    public void DocumentDataOnDemand.setNumerical(Document obj, int index) {
        Integer numerical = new Integer(index);
        if (numerical < 0) {
            numerical = 0;
        }
        obj.setNumerical(numerical);
    }
    
    public void DocumentDataOnDemand.setPrefix(Document obj, int index) {
        Prefix prefix = prefixDataOnDemand.getRandomPrefix();
        obj.setPrefix(prefix);
    }
    
    public void DocumentDataOnDemand.setUpdated(Document obj, int index) {
        Date updated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdated(updated);
    }
    
    public Document DocumentDataOnDemand.getSpecificDocument(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Document obj = data.get(index);
        Long id = obj.getId();
        return Document.findDocument(id);
    }
    
    public Document DocumentDataOnDemand.getRandomDocument() {
        init();
        Document obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Document.findDocument(id);
    }
    
    public boolean DocumentDataOnDemand.modifyDocument(Document obj) {
        return false;
    }
    
    public void DocumentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Document.findDocumentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Document' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Document>();
        for (int i = 0; i < 10; i++) {
            Document obj = getNewTransientDocument(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
